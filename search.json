[{"path":"https://irods.github.io/irods_client_library_rirods/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 rirods authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/articles/develop.html","id":"contributing-to-rirods-development","dir":"Articles","previous_headings":"","what":"Contributing to rirods development","title":"Developing rirods","text":"contribute rirods fork source files : https://github.com/irods/irods_client_library_rirods, make Pull Request.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/articles/develop.html","id":"prerequisites-r","dir":"Articles","previous_headings":"","what":"Prerequisites R","title":"Developing rirods","text":"following R packages required development: jsonlite, readr, testthat (>= 3.0.0) withr, httr2 httptest2. convenience, one can also use renv () renv::restore() install dependencies. usethis devtools packages suggestions streamline development. See https://devtools.r-lib.org/ https://usethis.r-lib.org/ common development tasks setups covered packages. Development rirods relies httptest2 enables testing logic R side API without requiring access remote service. recording API response mock files. mock files stored several directories .tests/testthat/. enable testing real API one needs remove mock files. helper remove_mock_files() simplifies task. function exported needs sourced (e.g., using devtools::load_all()) subsequently called.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/articles/develop.html","id":"prerequisites-irods","dir":"Articles","previous_headings":"","what":"Prerequisites iRODS","title":"Developing rirods","text":"unit test included source files can either run local remote iRODS C++ REST API service, version 0.9.3 later - https://github.com/irods/irods_client_rest_cpp.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/articles/develop.html","id":"local-server","dir":"Articles","previous_headings":"Prerequisites iRODS","what":"Local server","title":"Developing rirods","text":"Launch local demonstration iRODS service (including REST API): result demonstration REST API running http://localhost/irods-rest/0.9.3 (later version). configuration R needed development (except removing possible mock files). example, run unit tests local server use: devtools::test(). miscellaneous development tasks one can, furthermore, use non-exported function: local_create_irods(). test fixture almost exported function create_irods() except uses temporary directory working directory thereby preventing cluttering package source files. restarting R session (possibly CTRL + SHIFT + F10) running withr::deferred_run() working directory restored package directory.","code":"# clone the repository git clone --recursive https://github.com/irods/irods_demo # start the REST API cd irods_demo docker-compose up -d nginx-reverse-proxy"},{"path":"https://irods.github.io/irods_client_library_rirods/articles/develop.html","id":"remote-server","dir":"Articles","previous_headings":"Prerequisites iRODS","what":"Remote server","title":"Developing rirods","text":"Testing remote server requires specification server information. information needs entered .Rprofile file: server information stored environmental variables DEV_HOST_IRODS ,DEV_ZONE_PATH_IRODS, DEV_USER, DEV_PASS. Server information provided scrambled format prevent leakage sensitive information GitHub. following step needed scramble information. Generate package development key: Store package development key environmental variable user level. convenience one can use usethis::edit_r_environ() opens .Renviron file. Enter key replacing <key> follows: Scramble iRODS server information httr2::secret_encrypt(). example, scramble host name follows: Store scrambled information designated places project level .Rprofile: host name DEV_HOST_IRODS, zone path DEV_ZONE_PATH_IRODS (e.g., \"/tempZone/home\"), user name DEV_USER, password DEV_PASS. Restart R sessions (possibly CTRL + SHIFT + F10). Note unit tests built clean server one user (.e., DEV_USER). addition, one forget remove mock files (e.g., remove_mock_files(), see ) test real server.","code":"# dependency management options(renv.settings.snapshot.type = \"explicit\") source(\"renv/activate.R\")  # development key (create key with httr2::secret_make_key() and place in user # level environment variables. One can use usethis::edit_r_environ() for this. # Store the key under \"DEV_KEY_IRODS\")  # irods environment variables for development Sys.setenv(DEV_HOST_IRODS = \"nLO8T0IpHCT2kXklYE-IB0HjYpNkg5wN4ZKk7TPSvkwGf9FauDR-O5mVI-mmD2_zNFGLoaVcAgYl\") Sys.setenv(DEV_ZONE_PATH_IRODS = \"gunp5Ts08NHfpKAdbFCBuilVb7Wjnxojbt7bA1e-9Q\") Sys.setenv(DEV_USER = \"ZGlORquE2G6BIPS5JAcuPcngmBB6Wg\") Sys.setenv(DEV_PASS = \"ZGlORquE2G6BIPS5JAcuPcngmBB6Wg\") httr2::secret_make_key() DEV_KEY_IRODS=\"<key>\" httr2::secret_encrypt(\"http://myserver/irods-rest/0.9.3\" ,\"DEV_KEY_IRODS\")"},{"path":"https://irods.github.io/irods_client_library_rirods/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Schobben. Author, maintainer. Terrell Russell. Contributor. Christine Staiger. Contributor. Ton Smeele. Contributor. Alan King. Contributor. Mariana Montes. Contributor.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schobben M (2023). rirods: R Client iRODS. R package version 0.0.0.9000, https://github.com/irods/irods_client_library_rirods.","code":"@Manual{,   title = {rirods: R Client for iRODS},   author = {Martin Schobben},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://github.com/irods/irods_client_library_rirods}, }"},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"rirods","dir":"","previous_headings":"","what":"R Client for iRODS","title":"R Client for iRODS","text":"rirods package R client iRODS.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Client for iRODS","text":"can install development version rirods like :","code":"# install.packages(\"devtools\") devtools::install_github(\"irods/irods_client_library_rirods\")"},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"R Client for iRODS","text":"package connects iRODS C++ REST API - https://github.com/irods/irods_client_rest_cpp. Launch local demonstration iRODS service (including REST API): result demonstration REST API running http://localhost/irods-rest/0.9.3 (later version).","code":"# clone the repository git clone --recursive https://github.com/irods/irods_demo # start the REST API cd irods_demo docker-compose up -d nginx-reverse-proxy"},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example Usage","title":"R Client for iRODS","text":"connect REST API endpoint choice, load rirods, connect create_irods(), authenticate iRODS credentials:","code":"# load library(rirods)  # connect create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")"},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"authentication","dir":"","previous_headings":"Example Usage","what":"authentication","title":"R Client for iRODS","text":"example Alice user iRODS can authenticate iauth(). prompts dialog can enter username password without hardcoding information scripts.","code":"# login as alice with password \"passWORD\" iauth() # or iauth(\"alice\", \"passWORD\")"},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"save-r-objects","dir":"","previous_headings":"Example Usage","what":"save R objects","title":"R Client for iRODS","text":"Suppose Alice like upload R object current R session iRODS collection. , use isaveRDS() command:","code":"# some data foo <- data.frame(x = c(1, 8, 9), y = c(\"x\", \"y\", \"z\"))  # check where we are in the iRODS namespace ipwd() #> [1] \"/tempZone/home/alice\"  # store data in iRODS isaveRDS(foo, \"foo.rds\")"},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"metadata","dir":"","previous_headings":"Example Usage","what":"metadata","title":"R Client for iRODS","text":"truly appreciate strength iRODS, can add metadata describes data object “foo”:","code":"# add some metadata imeta(   \"foo.rds\",    \"data_object\",    operations =      list(operation = \"add\", attribute = \"foo\", value = \"bar\", units = \"baz\") )  # check if file is stored with associated metadata ils(metadata = TRUE) #>                   logical_path      metadata        type #> 1 /tempZone/home/alice/foo.rds foo, bar, baz data_object"},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"read-r-objects","dir":"","previous_headings":"Example Usage","what":"read R objects","title":"R Client for iRODS","text":"Alice wanted copy foo R object iRODS collection current R session, use ireadRDS():","code":"# retrieve in native R format ireadRDS(\"foo.rds\") #>   x y #> 1 1 x #> 2 8 y #> 3 9 z"},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"csv","dir":"","previous_headings":"Example Usage","what":"csv","title":"R Client for iRODS","text":"Possibly Alice want native R object stored iRODS file type can accessed programs. , use iput() command: Later somebody else might want download file store locally:","code":"library(readr)  # creates a csv file of foo write_csv(foo, \"foo.csv\")  # send file iput(\"foo.csv\")  # check whether it is stored ils() #>                   logical_path        type #> 1 /tempZone/home/alice/foo.csv data_object #> 2 /tempZone/home/alice/foo.rds data_object # retrieve it again later iget(\"foo.csv\") read_csv(\"foo.csv\") #> Rows: 3 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): y #> dbl (1): x #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 3 × 2 #>       x y     #>   <dbl> <chr> #> 1     1 x     #> 2     8 y     #> 3     9 z"},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"query","dir":"","previous_headings":"Example Usage","what":"query","title":"R Client for iRODS","text":"adding metadata others can easily discover data future projects. Objects can searched General Queries iquery():","code":"# look for objects in the home collection with a wildcard `%` iquery(\"SELECT COLL_NAME, DATA_NAME WHERE COLL_NAME LIKE '/tempZone/home/%'\") #>      [,1]                   [,2]      #> [1,] \"/tempZone/home/alice\" \"foo.csv\" #> [2,] \"/tempZone/home/alice\" \"foo.rds\" # or for data objects with a name that starts with \"foo\" iquery(\"SELECT COLL_NAME, DATA_NAME WHERE DATA_NAME LIKE 'foo%'\") #>      [,1]                   [,2]      #> [1,] \"/tempZone/home/alice\" \"foo.csv\" #> [2,] \"/tempZone/home/alice\" \"foo.rds\""},{"path":"https://irods.github.io/irods_client_library_rirods/index.html","id":"cleanup","dir":"","previous_headings":"Example Usage","what":"cleanup","title":"R Client for iRODS","text":"Finally, can clean Alice’s home collection:","code":"# delete object irm(\"foo.rds\", force = TRUE) irm(\"foo.csv\", force = TRUE)  # check if objects are removed ils() #> This collection does not contain any objects or collections."},{"path":"https://irods.github.io/irods_client_library_rirods/reference/create_irods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate IRODS project file — create_irods","title":"Generate IRODS project file — create_irods","text":"create iRODS project file containing information iRODS server. file created, future sessions connect iRODS server without intervention.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/create_irods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate IRODS project file — create_irods","text":"","code":"create_irods(host, zone_path, path = \".\", overwrite = FALSE)"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/create_irods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate IRODS project file — create_irods","text":"host URL host. zone_path Path zone iRODS server (e.g., \"/tempZone/home\"). path Path project. Defaults top directory zone.. overwrite Overwrite existing iRODS project file. Defaults FALSE.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/create_irods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate IRODS project file — create_irods","text":"Invisibly, path iRODS project file.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/create_irods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate IRODS project file — create_irods","text":"","code":"if(interactive()) { # connect project to server create_irods(\"http://localhost/irods-rest/0.9.2\", \"/tempZone/home\") }"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iauth.html","id":null,"dir":"Reference","previous_headings":"","what":"Authentication service for the iRODS zone — iauth","title":"Authentication service for the iRODS zone — iauth","text":"Provides authentication service iRODS zone. Using function without arguments results prompt asking user name password thereby preventing hard-coding sensitive information scripts.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iauth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authentication service for the iRODS zone — iauth","text":"","code":"iauth(user = NULL, password = NULL, role = \"rodsuser\")"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iauth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authentication service for the iRODS zone — iauth","text":"user iRODS user name (prompts user user name supplied). password iRODS password (prompts user password supplied). role iRODS role user (defaults \"rodsuser\").","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iauth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Authentication service for the iRODS zone — iauth","text":"Invisibly NULL.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iauth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Authentication service for the iRODS zone — iauth","text":"","code":"if(interactive()) { # connect project to server create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\") # authenticate iauth() }"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/icd.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set current working directory in iRODS — icd","title":"Get or set current working directory in iRODS — icd","text":"ipwd() icd() iRODS equivalents getwd() setwd() respectively. example, whereas getwd() returns current working directory local system, ipwd() returns current working directory iRODS.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/icd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set current working directory in iRODS — icd","text":"","code":"icd(dir)  ipwd()"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/icd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set current working directory in iRODS — icd","text":"dir Collection set working directory.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/icd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set current working directory in iRODS — icd","text":"Invisibly current directory change (convention setwd()).","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/icd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set current working directory in iRODS — icd","text":"","code":"if(interactive()) { # connect project to server create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")  # authenticate iauth()  # default dir icd(\".\") ipwd()  # relative paths work as well icd(\"/tempZone/home\") ipwd()  # go back on level lower icd(\"..\") ipwd()  # absolute paths work as well icd(\"/tempZone/home/rods\") ipwd() }"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iget.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve file or object from iRODS — iget","title":"Retrieve file or object from iRODS — iget","text":"Transfer file iRODS local storage iget() read R object RDS file iRODS ireadRDS() (see readRDS()).","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve file or object from iRODS — iget","text":"","code":"iget(   logical_path,   local_path = basename(logical_path),   offset = 0,   count = 2000L,   verbose = FALSE,   overwrite = FALSE )  ireadRDS(   logical_path,   offset = 0,   count = 2000L,   verbose = FALSE,   overwrite = FALSE )"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iget.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve file or object from iRODS — iget","text":"logical_path Source path iRODS. local_path Destination path local storage. default, basename logical path; file stored current directory (see getwd()). offset Offset bytes data object. Defaults 0. count Maximum number bytes write. Defaults 2000. verbose Whether information printed HTTP request response. overwrite Whether local file overwritten exists. Defaults FALSE.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iget.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve file or object from iRODS — iget","text":"R object case ireadRDS(), invisibly NULL case iget().","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iget.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve file or object from iRODS — iget","text":"","code":"if (interactive()) { create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\", TRUE)  # authenticate iauth()  # save the iris dataset as csv and send the file to iRODS library(readr) write_csv(iris, \"iris.csv\") iput(\"iris.csv\", overwrite = TRUE)  # bring the file back with a different name iget(\"iris.csv\", \"new_iris.csv\", overwrite = TRUE) files.exists(\"new_iris.csv\") # check that it has been transferred  # send an R object to iRODS in RDS format isaveRDS(iris, \"irids_in_rds.rds\")  # read it back iris_again <- ireadRDS(\"irids_in_rds.rds\") iris_again }"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/ils.html","id":null,"dir":"Reference","previous_headings":"","what":"List iRODS data objects and collections — ils","title":"List iRODS data objects and collections — ils","text":"List contents collection, optionally stat, metadata, /access control information element collection.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/ils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List iRODS data objects and collections — ils","text":"","code":"ils(   logical_path = \".\",   stat = FALSE,   permissions = FALSE,   metadata = FALSE,   offset = 0,   limit = 100,   message = TRUE,   verbose = FALSE )"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/ils.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List iRODS data objects and collections — ils","text":"logical_path Path collection whose contents listed. default current working directory (see ipwd()). stat Whether stat information included. Defaults FALSE. permissions Whether access control information included. Defaults FALSE. metadata Whether metadata information included. Defaults FALSE. offset Number records skip pagination. Defaults 0. limit Number records show per page. Defaults 100. message Whether message printed collection empty. verbose Whether information printed HTTP request response.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/ils.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List iRODS data objects and collections — ils","text":"Dataframe logical paths , requested, additional information.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/ils.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List iRODS data objects and collections — ils","text":"","code":"if(interactive()) { # connect project to server create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")  # authenticate iauth()  # list home directory ils()  # list a different directory ils('/tempZone/home/rods/some_collection')  # show metadata ils(metadata = TRUE) }"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/imeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Add or remove metadata — imeta","title":"Add or remove metadata — imeta","text":"iRODS, metadata stored attribute-value-units triples (AVUs), consisting attribute name, attribute value optional unit. function allows chain several operations ('add' 'remove') linked specific AVUs.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/imeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add or remove metadata — imeta","text":"","code":"imeta(   logical_path,   entity_type = c(\"data_object\", \"collection\", \"user\"),   operations = list(),   verbose = FALSE )"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/imeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add or remove metadata — imeta","text":"logical_path Path data object collection (name user). entity_type Type item add metadata remove . Options 'data_object', 'collection' 'user'. operations List named lists vectors representing operations. valid components lists vectors : operation, values 'add' 'remove', depending whether AVU added removed metadata item. attribute, name AVU. value, value AVU. units, unit AVU. verbose Whether information printed HTTP request response.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/imeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add or remove metadata — imeta","text":"Invisibly, HTTP response.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/imeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add or remove metadata — imeta","text":"","code":"if(interactive()) { # connect project to server create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")  # authentication iauth()  # some data foo <- data.frame(x = c(1, 8, 9), y = c(\"x\", \"y\", \"z\"))  # store iput(foo, \"foo.rds\")  # check if file is stored ils()  # add some metadata imeta(  \"foo.rds\",  \"data_object\",  operations = list(     operation = \"add\",     attribute = \"foo\",     value = \"bar\",     units = \"baz\"     ) )  imeta(  \"foo.rds\",  \"data_object\",  operations = list(    list(operation = \"add\", attribute = \"foo2\", value = \"bar2\"),    list(operation = \"add\", attribute = \"foo3\", value = \"bar3\")  ) )  # check if file is stored with associated metadata ils(metadata = TRUE) }"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/imkdir.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new collection in iRODS — imkdir","title":"Create a new collection in iRODS — imkdir","text":"equivalent dir.create(), creating collection iRODS instead local directory.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/imkdir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new collection in iRODS — imkdir","text":"","code":"imkdir(   logical_path,   collection = TRUE,   create_parent_collections = FALSE,   verbose = FALSE )"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/imkdir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new collection in iRODS — imkdir","text":"logical_path Path collection create, relative current working directory (see ipwd()). collection Whether collection created. Defaults TRUE. create_parent_collections Whether parent collections created necessary. verbose Whether information HTTP request response printed.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/imkdir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new collection in iRODS — imkdir","text":"Invisibly HTTP request.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/imkdir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new collection in iRODS — imkdir","text":"","code":"if (interactive()) { # connect project to server create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")  # authentication iauth()  ils() imkdir(\"new_collection\") ils() icd(\"new_collection\") }"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iput.html","id":null,"dir":"Reference","previous_headings":"","what":"Save files and objects in iRODS — iput","title":"Save files and objects in iRODS — iput","text":"Store object file iRODS. iput() used transfer file local storage iRODS; isaveRDS() saves R object current environment iRODS RDS format (see saveRDS()).","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save files and objects in iRODS — iput","text":"","code":"iput(   local_path,   logical_path = basename(local_path),   offset = 0,   count = 2000L,   truncate = \"true\",   verbose = FALSE,   overwrite = FALSE )  isaveRDS(   x,   logical_path,   offset = 0,   count = 2000L,   truncate = \"true\",   verbose = FALSE,   overwrite = FALSE )"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save files and objects in iRODS — iput","text":"local_path Local path file sent iRODS. logical_path Destination path iRODS. default, basename local_path used file stored current working directory (see ipwd()). offset Offset bytes data object. Defaults 0. count Maximum number bytes write. Defaults 2000. truncate Whether truncate object opening . Defaults TRUE. verbose Whether print information HTTP request response. overwrite Whether file iRODS overwritten exists. Defaults FALSE. x R object save iRODS.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save files and objects in iRODS — iput","text":"(Invisibly) HTTP response.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save files and objects in iRODS — iput","text":"","code":"if (interactive()) { # connect project to server create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\", TRUE)  # authenticate iauth()  # save the iris dataset as csv and send the file to iRODS library(readr) write_csv(iris, \"iris.csv\") iput(\"iris.csv\", overwrite = TRUE)  # save with a different name iput(\"iris.csv\", \"irids_in_irods.csv\", overwrite = TRUE) ils()  # send an R object to iRODS in RDS format isaveRDS(iris, \"irids_in_rds.rds\", overwrite = TRUE) }"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iquery.html","id":null,"dir":"Reference","previous_headings":"","what":"Query data objects and collections in iRODS — iquery","title":"Query data objects and collections in iRODS — iquery","text":"Use SQL-like expressions query data objects collections based different properties.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iquery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query data objects and collections in iRODS — iquery","text":"","code":"iquery(   query,   limit = 100,   offset = 0,   type = c(\"general\", \"specific\"),   case_sensitive = TRUE,   distinct = TRUE,   verbose = FALSE )"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iquery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query data objects and collections in iRODS — iquery","text":"query GeneralQuery searching iCAT database. limit Maximum number rows return. Defaults 100. offset Number rows skip paging. Defaults 0. type Type query: 'general' (default) 'specific'. case_sensitive Whether string matching query case sensitive. Defaults TRUE. distinct Whether distinct rows listed. Defaults TRUE. verbose Whether information printed HTTP request response.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iquery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query data objects and collections in iRODS — iquery","text":"Invisibly, HTTP response.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/iquery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query data objects and collections in iRODS — iquery","text":"","code":"if(interactive()) { # connect project to server create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")  # authentication iauth()  # search for objects by metadata iquery(\"SELECT COLL_NAME, DATA_NAME WHERE COLL_NAME LIKE '/tempZone/home/%'\") iquery(\"SELECT COLL_NAME, DATA_NAME WHERE META_DATA_ATTR_NAME LIKE 'foo%'\") }"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/irm.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove data objects or collections in iRODS. — irm","title":"Remove data objects or collections in iRODS. — irm","text":"equivalent file.remove(), applied item inside iRODS.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/irm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove data objects or collections in iRODS. — irm","text":"","code":"irm(logical_path, force = TRUE, recursive = FALSE, verbose = FALSE)"},{"path":"https://irods.github.io/irods_client_library_rirods/reference/irm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove data objects or collections in iRODS. — irm","text":"logical_path Path data object collection remove. force Whether data object collection deleted permanently. FALSE, sent trash collection. recursive collection provided, whether contents also removed. collection empty recursive FALSE, deleted. verbose Whether information printed HTTP request response.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/irm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove data objects or collections in iRODS. — irm","text":"Invisibly HTTP call.","code":""},{"path":"https://irods.github.io/irods_client_library_rirods/reference/irm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove data objects or collections in iRODS. — irm","text":"","code":"if (interactive()) { # connect project to server create_irods(\"http://localhost/irods-rest/0.9.3\", \"/tempZone/home\")  # authentication iauth()  # some data foo <- data.frame(x = c(1, 8, 9), y = c(\"x\", \"y\", \"z\"))  # store iput(foo, \"foo.rds\")  # check if file is stored ils()  # delete object irm(\"foo.rds\", force = TRUE) iquery(\"SELECT COLL_NAME, DATA_NAME WHERE DATA_NAME LIKE 'foo%'\") }"}]
