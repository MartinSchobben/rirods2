[{"path":"https://martinschobben.github.io/rirods/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 rirods authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://martinschobben.github.io/rirods/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Schobben. Author, maintainer.","code":""},{"path":"https://martinschobben.github.io/rirods/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schobben M (2022). rirods: R Client iRODS. R package version 0.0.0.9000, https://martinschobben.github.io/rirods/.","code":"@Manual{,   title = {rirods: R Client for iRODS},   author = {Martin Schobben},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://martinschobben.github.io/rirods/}, }"},{"path":"https://martinschobben.github.io/rirods/index.html","id":"rirods","dir":"","previous_headings":"","what":"R Client for iRODS","title":"R Client for iRODS","text":"rirods package R client iRODS.","code":""},{"path":"https://martinschobben.github.io/rirods/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Client for iRODS","text":"can install development version rirods like :","code":"# install.packages(\"devtools\") devtools::install_github(\"MartinSchobben/rirods\")"},{"path":"https://martinschobben.github.io/rirods/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"R Client for iRODS","text":"basic example shows quickly launch local iRODS server, connect R, perform actions. information iRODS demo server check https://github.com/irods/irods_demo. Provide host name server connect R project iRODS server, like : example Bobby user iRODS can authenticate iauth(). prompts dialog can enter username password without hardcoding information scripts. Suppose Bobby like upload R object current R session iRODS collection. , use iput() command: truly appreciate strength iRODS, can add metadata describes data object “foo”. Bobby wanted copy foo R object iRODS collection local directory, use iget(): Possibly Bobby want native R object stored iRODS file type can accessed programs. Later somebody else might want download file store locally. adding metadata others can easily discover data future projects. Objects can searched General Queries iquery(): Finally, can clean Bobby’s home directory:","code":"# clone the repo # git clone https://github.com/irods/irods_demo # initiate git submodules # git submodule update --init # to start cd ../irods_demo docker-compose up library(rirods)  # connect project to server create_irods(\"http://localhost/irods-rest/0.9.2\") # login as bobby with password \"passWORD\" iauth() # or iauth(\"bobby\", \"passWORD\") # some data foo <- data.frame(x = c(1, 8, 9), y = c(\"x\", \"y\", \"z\"))  # check where we are ipwd() #> [1] \"/tempZone/home/bobby\"  # store iput(foo) # add some metadata imeta(   \"foo\",    \"data_object\",    operations =      list(operation = \"add\", attribute = \"foo\", value = \"bar\", units = \"baz\") )  # check if file is stored with associated metadata ils(metadata = TRUE) #>                logical_path      metadata        type #> 1  /tempZone/home/bobby/foo foo, baz, bar data_object #> 2 /tempZone/home/bobby/test          NULL data_object # retrieve in native R format iget(\"foo\") #>   x y #> 1 1 x #> 2 8 y #> 3 9 z library(readr)  # creates a csv file of foo write_csv(foo, \"foo.csv\")  # send file iput(\"foo.csv\")  # check whether it is stored ils() #>                   logical_path        type #> 1     /tempZone/home/bobby/foo data_object #> 2 /tempZone/home/bobby/foo.csv data_object #> 3    /tempZone/home/bobby/test data_object # retrieve it again later iget(\"foo.csv\") read_csv(\"foo.csv\") #> Rows: 3 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): y #> dbl (1): x #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 3 × 2 #>       x y     #>   <dbl> <chr> #> 1     1 x     #> 2     8 y     #> 3     9 z # look for objects in the home directory with a wildcard `%` iquery(\"SELECT COLL_NAME, DATA_NAME WHERE COLL_NAME LIKE '/tempZone/home/%'\") #>             collection data_object #> 1 /tempZone/home/bobby         foo #> 2 /tempZone/home/bobby     foo.csv #> 3 /tempZone/home/bobby        test # or where data objects named \"foo\" can be found iquery(\"SELECT COLL_NAME, DATA_NAME WHERE DATA_NAME LIKE 'foo%'\") #>                    collection        data_object #> 1        /tempZone/home/bobby                foo #> 2        /tempZone/home/bobby            foo.csv #> 3  /tempZone/trash/home/bobby                foo #> 4  /tempZone/trash/home/bobby     foo.1576729182 #> 5  /tempZone/trash/home/bobby     foo.2405108537 #> 6  /tempZone/trash/home/bobby     foo.2435297455 #> 7  /tempZone/trash/home/bobby     foo.2560339278 #> 8  /tempZone/trash/home/bobby      foo.826411162 #> 9  /tempZone/trash/home/bobby            foo.csv #> 10 /tempZone/trash/home/bobby foo.csv.1036575935 #> 11 /tempZone/trash/home/bobby foo.csv.1144265542 #> 12 /tempZone/trash/home/bobby foo.csv.2236717404 #> 13 /tempZone/trash/home/bobby foo.csv.3876715845 #> 14 /tempZone/trash/home/bobby foo.csv.4082161960 # delete object irm(\"foo\", trash = FALSE) irm(\"foo.csv\", trash = FALSE)  # check if object is removed ils() #>                logical_path        type #> 1 /tempZone/home/bobby/test data_object"},{"path":"https://martinschobben.github.io/rirods/reference/create_irods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate IRODS project file — create_irods","title":"Generate IRODS project file — create_irods","text":"create irods project file containing information iRODS server.","code":""},{"path":"https://martinschobben.github.io/rirods/reference/create_irods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate IRODS project file — create_irods","text":"","code":"create_irods(host, path = \".\", overwrite = FALSE)"},{"path":"https://martinschobben.github.io/rirods/reference/create_irods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate IRODS project file — create_irods","text":"host URL host. path Path project (defaults current directory). overwrite Overwrite existing irods file (defaults FALSE).","code":""},{"path":"https://martinschobben.github.io/rirods/reference/create_irods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate IRODS project file — create_irods","text":"Invisibly returns path irods file.","code":""},{"path":"https://martinschobben.github.io/rirods/reference/create_irods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate IRODS project file — create_irods","text":"","code":"if(interactive()) { # connect project to server create_irods(\"http://localhost/irods-rest/0.9.2\") }"},{"path":"https://martinschobben.github.io/rirods/reference/iadmin.html","id":null,"dir":"Reference","previous_headings":"","what":"The administration interface to the iRODS — iadmin","title":"The administration interface to the iRODS — iadmin","text":"administration interface iRODS","code":""},{"path":"https://martinschobben.github.io/rirods/reference/iadmin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The administration interface to the iRODS — iadmin","text":"","code":"iadmin(   action,   target,   arg2 = character(1),   arg3 = character(1),   arg4 = character(1),   arg5 = character(1),   arg6 = character(1),   arg7 = character(1),   verbose = FALSE )"},{"path":"https://martinschobben.github.io/rirods/reference/iadmin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The administration interface to the iRODS — iadmin","text":"action action: add, modify, remove. target subject action: user, zone, resource, childtoresc, childfromresc, token, group, rebalance, unusedAVUs, specificQuery. arg2 arg2 arg3 arg3 arg4 arg4 arg5 arg5 arg6 arg6 arg7 arg7 verbose Show information http request response.","code":""},{"path":"https://martinschobben.github.io/rirods/reference/iadmin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The administration interface to the iRODS — iadmin","text":"Invisible success (200) otherwise http status.","code":""},{"path":"https://martinschobben.github.io/rirods/reference/iauth.html","id":null,"dir":"Reference","previous_headings":"","what":"Authentication service for the iRODS zone — iauth","title":"Authentication service for the iRODS zone — iauth","text":"Authentication service iRODS zone","code":""},{"path":"https://martinschobben.github.io/rirods/reference/iauth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authentication service for the iRODS zone — iauth","text":"","code":"iauth(user = NULL, password = NULL)"},{"path":"https://martinschobben.github.io/rirods/reference/iauth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authentication service for the iRODS zone — iauth","text":"user iRODS user name. password iRODS password.","code":""},{"path":"https://martinschobben.github.io/rirods/reference/iauth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Authentication service for the iRODS zone — iauth","text":"Invisibly NULL","code":""},{"path":"https://martinschobben.github.io/rirods/reference/iauth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Authentication service for the iRODS zone — iauth","text":"","code":"if(interactive()) { # authenticate iauth() }"},{"path":"https://martinschobben.github.io/rirods/reference/icd.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve an object from iRODS — icd","title":"Retrieve an object from iRODS — icd","text":"Retrieve object iRODS","code":""},{"path":"https://martinschobben.github.io/rirods/reference/icd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve an object from iRODS — icd","text":"","code":"icd(dir)  ipwd()"},{"path":"https://martinschobben.github.io/rirods/reference/icd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve an object from iRODS — icd","text":"dir Change current directory DIR.  default DIR value HOME shell variable.","code":""},{"path":"https://martinschobben.github.io/rirods/reference/icd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve an object from iRODS — icd","text":"invisibly returns path","code":""},{"path":"https://martinschobben.github.io/rirods/reference/icd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve an object from iRODS — icd","text":"","code":"if(interactive()) { # authenticate iauth()  # default dir icd(\".\") ipwd()   # some other dir icd(\"/tempZone/home\") ipwd()  # go back on level lower icd(\"..\") ipwd()  # relative paths work as well icd(\"../home/public\") ipwd() }"},{"path":"https://martinschobben.github.io/rirods/reference/ils.html","id":null,"dir":"Reference","previous_headings":"","what":"Listing iRODS data objects and collections — ils","title":"Listing iRODS data objects and collections — ils","text":"Recursive listing collection, stat, metadata, access control information given data object.","code":""},{"path":"https://martinschobben.github.io/rirods/reference/ils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Listing iRODS data objects and collections — ils","text":"","code":"ils(   path = \".\",   stat = FALSE,   permissions = FALSE,   metadata = FALSE,   offset = 0,   limit = 100,   message = TRUE,   verbose = FALSE )"},{"path":"https://martinschobben.github.io/rirods/reference/ils.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Listing iRODS data objects and collections — ils","text":"path Directory listed. stat Boolean flag indicate stat information desired. permissions Boolean flag indicate access control information desired. metadata Boolean flag indicate metadata desired. offset Number records skip pagination. limit Number records desired per page. message case collection empty message saying returned. verbose Show information http request response.","code":""},{"path":"https://martinschobben.github.io/rirods/reference/ils.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Listing iRODS data objects and collections — ils","text":"tibble logical paths","code":""},{"path":"https://martinschobben.github.io/rirods/reference/ils.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Listing iRODS data objects and collections — ils","text":"","code":"if(interactive()) { # authenticate iauth()  # list home directory ils() }"},{"path":"https://martinschobben.github.io/rirods/reference/imeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Describe your data — imeta","title":"Describe your data — imeta","text":"Describe data","code":""},{"path":"https://martinschobben.github.io/rirods/reference/imeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describe your data — imeta","text":"","code":"imeta(   x,   entity_type,   operations = list(operation = \"add\", attribute = NULL, value = NULL, units = NULL),   path = \".\",   verbose = FALSE )  iquery(   query,   limit = 100,   offset = 0,   type = \"general\",   casesensitive = TRUE,   distinct = TRUE,   verbose = FALSE )"},{"path":"https://martinschobben.github.io/rirods/reference/imeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describe your data — imeta","text":"x object, collection user entity_type Type (object, collection user) operations List contains following named elements; operation, adds (\"add\") removes (\"remove\") object, metadata triplet attribute, value, units. path Path object (defaults \".\"). verbose Show information http request response. query query GeneralQuery searching iCAT database. limit max number rows return (defaults 100) offset Number rows skip paging (defaults 0). type Either 'general' 'specific' (defaults 'general'). casesensitive Affects string matching (defaults TRUE). distinct list distinct rows (defaults TRUE).","code":""},{"path":"https://martinschobben.github.io/rirods/reference/imeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Describe your data — imeta","text":"Invisibly returns response.","code":""},{"path":"https://martinschobben.github.io/rirods/reference/imeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Describe your data — imeta","text":"","code":"if(interactive()) { # authentication iauth()  # some data foo <- data.frame(x = c(1, 8, 9), y = c(\"x\", \"y\", \"z\"))  # store iput(foo)  # check if file is stored ils()  # add some metadata # add some metadata imeta(  \"foo\",  \"data_object\",  operations =   list(operation = \"add\", attribute = \"foo\", value = \"bar\", units = \"baz\") )  # check if file is stored with associated metadata ils(metadata = TRUE)  # search for objects by metadata iquery(\"SELECT COLL_NAME, DATA_NAME WHERE COLL_NAME LIKE '/tempZone/home/%'\") }"},{"path":"https://martinschobben.github.io/rirods/reference/iput.html","id":null,"dir":"Reference","previous_headings":"","what":"Working with data objects — iput","title":"Working with data objects — iput","text":"Working data objects","code":""},{"path":"https://martinschobben.github.io/rirods/reference/iput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Working with data objects — iput","text":"","code":"iput(   x,   path = \".\",   offset = 0,   truncate = TRUE,   verbose = FALSE,   overwrite = FALSE )  iget(x, path = x, offset = 0, count = 1000, verbose = FALSE, overwrite = FALSE)"},{"path":"https://martinschobben.github.io/rirods/reference/iput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Working with data objects — iput","text":"x R object stored iRODS server. path Destination path. offset Offset bytes data object (Defaults FALSE). truncate Truncates object open (defaults TRUE). verbose Show information http request response. overwrite Overwrite irods object local file (defaults FALSE). count Maximum number bytes read write.","code":""},{"path":"https://martinschobben.github.io/rirods/reference/iput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Working with data objects — iput","text":"R object","code":""},{"path":"https://martinschobben.github.io/rirods/reference/iput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Working with data objects — iput","text":"","code":"if(interactive()) { # authentication iauth()  # some data foo <- data.frame(x = c(1, 8, 9), y = c(\"x\", \"y\", \"z\"))  # store iput(foo)  # check if file is stored ils()  # retrieve in native R format iget(\"foo\") }"},{"path":"https://martinschobben.github.io/rirods/reference/irm.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete an object from iRODS — irm","title":"Delete an object from iRODS — irm","text":"Delete object iRODS","code":""},{"path":"https://martinschobben.github.io/rirods/reference/irm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete an object from iRODS — irm","text":"","code":"irm(x, trash = TRUE, recursive = FALSE, unregister = FALSE, verbose = FALSE)"},{"path":"https://martinschobben.github.io/rirods/reference/irm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete an object from iRODS — irm","text":"x R object stored iRODS server. trash Send trash delete permanently (default = TRUE). recursive Recursively delete contents collection (default = FALSE). unregister Unregister data objects instead deleting (default = FALSE). verbose Show information http request response.","code":""},{"path":"https://martinschobben.github.io/rirods/reference/irm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete an object from iRODS — irm","text":"Invisible object removed","code":""},{"path":"https://martinschobben.github.io/rirods/reference/irm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete an object from iRODS — irm","text":"","code":"if(interactive()) { # authentication iauth()  # some data foo <- data.frame(x = c(1, 8, 9), y = c(\"x\", \"y\", \"z\"))  # store iput(foo)  # check if file is stored ils()  # delete object irm(\"foo\", trash = FALSE)  # check if file is delete ils() }"}]
